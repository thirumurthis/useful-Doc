@Test(expected=IllegalArithmeticException.class)
 => this is used to validate if the method returns successfully if the method thorws
 exception.
 => Expected is optional
 => trace the informaion using fail()
 
 Note 
 
 @Test(expected=IllegalArithimeticException.class)
 public void resultDiv(){
    assertEquals(1,tstObject.calcDive(1,0));
 }

------------------------------------------------------------

@Rule => Error Collector
When there are some exception during the execution of test case there might be interaption 
and the process might have stopped.

Collect the exception and display at the end of the execution.

@Rule annotation which used to create an object of ErrorCollector.
and use addError(Throwable error).

In case of using simple assert or try/catch block, using error collector won't be possible.

import org.junit.Assert;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ErrorCollector;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertSame;

public class ErrorCollectorExample {
    @Rule
    public ErrorCollector collect = new ErrorCollector();

    @Test
    public void testTStringreturn() {
        collect.addError(new Throwable("1st line - This is an error.."));
        assertEquals("Hello ", (new TStringClass()).returnit("Hello "));
        collect.addError(new Throwable("3rd line - this is not expected"));
        System.out.println("Hellooooo");
        try {
            Assert.assertTrue("1 "=="2");
        }catch(Throwable error){
            collect.addError(error);
        }
    }
    @Test(expected=ArithmeticException.class)
    public void testTFixtureDiv(){
        TFixtureClac calc= new TFixtureClac();
        assertEquals(1,calc.divideTwoNumbers(1,0));
    }
}

   When running the class using TestRunner it will run succcessful.
   
There are several built-in rules provided by Junitapi that can be used.
A own rule can also be written.

Test continuity and recovery handling is crucial to est automation success. 
Error collector is the best way to handle it.

--------------------------------------------------
@Parameters => Junit Parameterized Test with @Parameters

This are used to execute the same test over and over again, usign different values.
Using parameterized test, one can setup a test method that retrieves data from some
data source.

@Test public void testArithematicAdd(){
 assertEquals("10+15 = 25",25,airthmatic.sum(10,15));
 assertEquals("10+25 = 35",25,airthmatic.sum(10,25));
 assertEquals("10+35 = 45",25,airthmatic.sum(10,35));
 }
 
Steps To follow
use @RunWith(Parameterized.class) // Parameterized class with the parameter
//values to be used for testng the test case over and over with different values

@RunWith(Parameterized.class) //Parameterized.class is Runner class name
public class ArithmeticAddTest{
 private int a;
 private int b;
 private int expectedres;
 private ArithementAdd arithematicAdd; // class that needs to be tested.
 
 //Note:@RunWith is not specified with any value, BlockJunit3ClassRunner will be considered
 //by default.
 
 //This class is resoponsible for test to run with a new test instance and invoking lofecyvle
 //methods like setup and teardown.
 
 //create constructor 
 public ArithematicAdd(int a, int b, int expectedres){
 super();
 this.a=a; this.b=b; this.expectedres = expectedres;
 }
 
 // static method to return test data
 
 @Parametrized.Parameters //used to create set of input data to run test
 public static Collection input(){
    return Arrays.asList(new Object[][]{{1,2,3},{11,22,33},{111,222,333}});
    }
//Note: static method identified by @Parameters annotation returns a Collection where
each entry in the Collection will be the input data for one iteration.
 
 
 
 
 
 
 
 
 
 
 




